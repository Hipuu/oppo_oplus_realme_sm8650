name: Accelerated Build 6.1.57 Oppo OnePlus Realme OKI Kernel

env:
  TZ: Asia/Shanghai
  CPU: 'sm8650'
  FEIL: 'oppo+oplus+realme'
  ANDROID_VERSION: 'android14'
  KERNEL_VERSION: '6.1'
  KERNEL_NAME: 'android14-11-o-gca13bffobf09'
  KERNELSU_VARIANT: 'SukiSU-Ultra'
  KERNELSU_BRANCH: 'susfs-main'

on:
  workflow_dispatch:
  # Uncomment the following code to enable daily scheduled compilation
#  schedule:
#    - cron: '0 23 * * *'  # 23:00 UTC (7:00 AM Beijing time the next day)
    inputs:
      hook_method:
        description: hook mode (manual is sufficient in most cases, kprobes hook is only needed for scenarios requiring sus su mode)
        required: true
        type: choice
        default: 'manual'
        options:
          - 'manual'
          - 'kprobes'
      kpm_enable:
        description: 'Whether to enable KPM (may slightly increase power consumption, can be disabled if not needed)'
        required: true
        type: choice
        default: 'true'
        options:
          - 'true'
          - 'false'
      lz4k_enable:
        description: 'Whether to install LZ4KD patch'
        required: true
        type: choice
        default: 'false'
        options:
          - 'true'
          - 'false'
      lz4_enable:
        description: 'Whether to install lz4 1.10.0 + zstd 1.5.7 patch'
        required: true
        type: choice
        default: 'true'
        options:
          - 'true'
          - 'false'
      bbr_enable:
        description: "Whether to enable BBR algorithm (optimizes uplink data, not very meaningful for daily phone use and may even be counterproductive; false to disable, true to add algorithm only, default to set as default)"
        required: true
        type: choice
        default: 'false'
        options:
          - 'false'
          - 'true'
          - 'default'
      better_net:
        description: 'Whether to enable network enhancement optimization configuration (optimizes proxy connections, IPv6, etc.)'
        required: true
        type: choice
        default: 'true'
        options:
          - 'true'
          - 'false'
      ssg_enable:
        description: 'Whether to enable Samsung SSG IO scheduler (a very small number of models like OnePlus 12 may fail to boot after enabling; if bugs occur, disable this option)'
        required: true
        type: choice
        default: 'true'
        options:
          - 'true'
          - 'false'
      scx_enable:
        description: 'Whether to install Fengchi kernel driver (unfinished)'
        required: true
        type: choice
        default: 'false'
        options:
          - 'true'
          - 'false'
      kernel_suffix:
        description: 'Kernel suffix (leave blank for default, do not add hyphens at the beginning, do not add spaces or other reserved characters that affect command execution)'
        required: false
        type: string
        default: ''

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      ksuver: ${{ steps.ksu_version.outputs.ksuver }}
    steps:
      - name: Install and configure environment dependencies
        run: |
          sudo apt-mark hold firefox
          sudo apt-mark hold libc-bin
          sudo apt purge man-db
          sudo rm -rf /var/lib/man-db/auto-update
          sudo apt update
          sudo apt-get install -y --no-install-recommends \
            curl bison flex make binutils git perl gcc python3 \
            python-is-python3 bc libssl-dev libelf-dev \
            bc aria2 zip unzip ccache

      - name: Configure ccache directory
        run: |
          echo "CCACHE_DIR=$HOME/.ccache_6.1.57" >> $GITHUB_ENV
          echo "CCACHE_MAXSIZE=3G" >> $GITHUB_ENV
          echo "Current disk space:"
          df -h
          echo "Current kernel version to build: 6.1.57"
          rm -rf kernel_platform

      - name: Load ccache for current kernel version
        uses: actions/cache@v3
        id: ccache-restore
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ccache-new-6.1.57-${{ runner.os }}-main
          restore-keys: |
            ccache-new-6.1.57-${{ runner.os }}-
            ccache-new-6.1.57-
            ccache-new-
      
      - name: Initialize and configure ccache
        run: |
          # Set ccache environment variables
          export CCACHE_COMPILERCHECK="%compiler% -dumpmachine; %compiler% -dumpversion"
          export CCACHE_NOHASHDIR="true"
          export CCACHE_HARDLINK="true"
          export CCACHE_DIR="${{ env.CCACHE_DIR }}"
          export CCACHE_MAXSIZE="${{ env.CCACHE_MAXSIZE }}"
          
          # Ensure ccache directory exists
          mkdir -p "$CCACHE_DIR"
          
          # Reconfigure cache size on each run
          echo "Configuring ccache cache size to: $CCACHE_MAXSIZE"
          ccache -M "$CCACHE_MAXSIZE"
          ccache -o compression=true
          
          # Display initial cache status
          echo "ccache initial status:"
          ccache -s
          
          # If cache restore hit, display details
          if [ "${{ steps.ccache-restore.outputs.cache-hit }}" == 'true' ]; then
            echo "ccache cache hit details:"
            ccache -sv
          fi
      
      - name: Initialize source repository and llvm-Clang20 toolchain
        run: |
          rm -rf kernel_workspace
          mkdir kernel_workspace
          cd kernel_workspace
          echo "Cloning source repository..."
          aria2c -s16 -x16 -k1M https://github.com/cctv18/android_kernel_common_oneplus_sm8650/archive/refs/heads/oneplus/sm8650_u_14.0.0_oneplus12.zip -o common.zip
          unzip -q common.zip
          mv "android_kernel_common_oneplus_sm8650-oneplus-sm8650_u_14.0.0_oneplus12" common
          rm -rf common.zip
          echo "Cloning llvm-Clang20 toolchain..."
          rm -rf clang20
          mkdir -p clang20
          aria2c -s16 -x16 -k1M https://github.com/cctv18/oneplus_sm8650_toolchain/releases/download/LLVM-Clang20-r547379/clang-r547379.zip -o clang.zip
          unzip -q clang.zip -d clang20
          rm -rf clang.zip
          echo "Cloning build tools..."
          rm -rf build-tools
          aria2c -s16 -x16 -k1M https://github.com/cctv18/oneplus_sm8650_toolchain/releases/download/LLVM-Clang20-r547379/build-tools.zip -o build-tools.zip
          unzip -q build-tools.zip
          rm -rf build-tools.zip
          echo "Removing ABI protection & dirty suffix..."
          rm common/android/abi_gki_protected_exports_* || true
          for f in common/scripts/setlocalversion; do
            sed -i 's/ -dirty//g' "$f"
            sed -i '$i res=$(echo "$res" | sed '\''s/-dirty//g'\'')' "$f"
          done

      - name: Add SukiSU Ultra
        id: ksu_version
        run: |
          # Enter kernel workspace directory
          cd kernel_workspace
          curl -LSs "https://raw.githubusercontent.com/ShirkNeko/SukiSU-Ultra/refs/heads/main/kernel/setup.sh" | bash -s susfs-main
          cd ./KernelSU
          export KSU_VERSION=$KSU_VERSION
          # Try to get KernelSU API version up to 3 times
          for i in {1..3}; do
            # Extract KSU_API_VERSION from remote Makefile
            KSU_API_VERSION=$(curl -s "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/susfs-main/kernel/Makefile" | 
              # Find the first line containing the version definition
              grep -m1 "KSU_VERSION_API :=" | 
              # Extract the value after the equals sign
              awk -F'= ' '{print $2}' | 
              # Remove all whitespace characters
              tr -d '[:space:]')
            # If version number is successfully obtained, break the loop, otherwise wait 1 second and retry
            [ -n "$KSU_API_VERSION" ] && break || sleep 1
          done
          # If failed to obtain, use default version 3.1.7
          [ -z "$KSU_API_VERSION" ] && KSU_API_VERSION="3.1.7"
          # Store API version in GitHub environment variable
          echo "KSU_API_VERSION=$KSU_API_VERSION" >> $GITHUB_ENV
          # Create version definition template & version format function
          # KSU_VERSION_API: API version definition
          # KSU_VERSION_FULL: Full version definition
          VERSION_DEFINITIONS=$(cat << EOF
          define get_ksu_version_full
          v\\$1-SukiSU-cctv18
          endef

          KSU_VERSION_API := $KSU_API_VERSION
          KSU_VERSION_FULL := v$KSU_API_VERSION-SukiSU-cctv18
          EOF
            )
          # Clean old version definitions in kernel Makefile
          # Delete version function
          sed -i '/define get_ksu_version_full/,/endef/d' kernel/Makefile
          # Delete API version definition
          sed -i '/KSU_VERSION_API :=/d' kernel/Makefile
          # Delete full version definition
          sed -i '/KSU_VERSION_FULL :=/d' kernel/Makefile
          # Insert new version definition after REPO_OWNER line
          awk -v def="$VERSION_DEFINITIONS" '
            # When REPO_OWNER line is found, insert version definition and set flag
            /REPO_OWNER :=/ {print; print def; inserted=1; next}
            # Print all lines
            1
            # If insertion point not found, append at end of file
            END {if (!inserted) print def}
          ' kernel/Makefile > kernel/Makefile.tmp && mv kernel/Makefile.tmp kernel/Makefile

          # Generate custom version number (based on commit count), use 114514 on failure
          KSU_VERSION=$(expr $(git rev-list --count main) + 10700 2>/dev/null || echo 114514)
          # Store version number in GitHub environment variable
          echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
          echo "ksuver=$KSU_VERSION" >> $GITHUB_OUTPUT

          # Verify modification results
          grep -A10 "REPO_OWNER" kernel/Makefile  # Check content after insertion point
          grep "KSU_VERSION_FULL" kernel/Makefile # Confirm version definition exists


      - name: Apply SukiSU-Ultra & SUSFS patches
        run: |
          cd kernel_workspace
          git clone https://github.com/ShirkNeko/susfs4ksu.git -b gki-${{ env.ANDROID_VERSION }}-${{ env.KERNEL_VERSION }}
          git clone https://github.com/ShirkNeko/SukiSU_patch.git
          cp ./susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ env.ANDROID_VERSION }}-${{ env.KERNEL_VERSION }}.patch ./common/
          cp ./susfs4ksu/kernel_patches/fs/* ./common/fs/
          cp ./susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/
          cp ./SukiSU_patch/hooks/syscall_hooks.patch ./common/
          cd ./common
          patch -p1 < 50_add_susfs_in_gki-${{ env.ANDROID_VERSION }}-${{ env.KERNEL_VERSION }}.patch || true
          patch -p1 < syscall_hooks.patch || true
          
      - name: Apply lz4 1.10.0 & zstd 1.5.7 patches
        run: |
          if [ "${{ github.event.inputs.lz4_enable }}" == "true" ]; then
            echo "Adding lz4 1.10.0 & zstd 1.5.7 patches..."
            cd kernel_workspace
            git clone https://github.com/cctv18/oppo_oplus_realme_sm8650.git
            cp ./oppo_oplus_realme_sm8650/zram_patch/001-lz4.patch ./common/
            cp ./oppo_oplus_realme_sm8650/zram_patch/lz4armv8.S ./common/lib
            cp ./oppo_oplus_realme_sm8650/zram_patch/002-zstd.patch ./common/
            cd ./common
            git apply -p1 < 001-lz4.patch || true
            patch -p1 < 002-zstd.patch || true
          fi

      - name: Apply Hide Stuff patch
        run: |
          cd kernel_workspace/common
          cp ../SukiSU_patch/69_hide_stuff.patch ./
          patch -p1 < 69_hide_stuff.patch

      - name: Apply lz4kd patch
        run: |
          if [[ "${{ github.event.inputs.lz4k_enable }}" == "true" ]]; then
            echo "Adding lz4kd patch..."
            cd kernel_workspace/common
            cp -r ../SukiSU_patch/other/zram/lz4k/include/linux/* ./include/linux/
            cp -r ../SukiSU_patch/other/zram/lz4k/lib/* ./lib
            cp -r ../SukiSU_patch/other/zram/lz4k/crypto/* ./crypto
            cp ../SukiSU_patch/other/zram/zram_patch/${{ env.KERNEL_VERSION }}/lz4kd.patch ./
            patch -p1 -F 3 < lz4kd.patch || true
          fi
          
      - name: Add SukiSU-Ultra & SUSFS configuration items
        run: |
          cd kernel_workspace
          echo "CONFIG_KSU=y" >> ./common/arch/arm64/configs/gki_defconfig
          if [ "${{ github.event.inputs.kpm_enable }}" == "true" ]; then
            echo "CONFIG_KPM=y" >> ./common/arch/arm64/configs/gki_defconfig
          fi
          if [ "${{ github.event.inputs.hook_method }}" == "kprobes" ]; then
            echo "Enabling kprobes hook..."
            echo "CONFIG_KSU_SUSFS_SUS_SU=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_KSU_MANUAL_HOOK=n" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_KSU_KPROBES_HOOK=y" >> ./common/arch/arm64/configs/gki_defconfig
          else
            echo "Enabling manual hook..."
            echo "CONFIG_KSU_MANUAL_HOOK=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> ./common/arch/arm64/configs/gki_defconfig
          fi
          echo "CONFIG_KSU_SUSFS=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> ./common/arch/arm64/configs/gki_defconfig
          #echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> ./common/arch/arm64/configs/gki_defconfig
          if [[ "${{ github.event.inputs.lz4k_enable }}" == "true" ]]; then
            echo "CONFIG_ZSMALLOC=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_CRYPTO_LZ4HC=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_CRYPTO_LZ4K=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_CRYPTO_LZ4KD=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_CRYPTO_842=y" >> ./common/arch/arm64/configs/gki_defconfig
            # The necessity of the following configurations has not been verified, pending testing
            #echo "CONFIG_ZRAM_WRITEBACK=y" >> ./common/arch/arm64/configs/gki_defconfig
            #sed -i 's/CONFIG_ZRAM=m/CONFIG_ZRAM=y/g' ./common/arch/arm64/configs/gki_defconfig
            #sed -i 's/CONFIG_MODULE_SIG=y/CONFIG_MODULE_SIG=n/g' ./common/arch/arm64/configs/gki_defconfig
          fi
          # Enable O2 compilation optimization configuration
          echo "CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE=y" >> ./common/arch/arm64/configs/gki_defconfig
          # Disable defconfig check
          sed -i 's/check_defconfig//' ./common/build.config.gki
          
      - name: Enable network enhancement optimization configuration
        run: |
          cd kernel_workspace
          if [ "${{ github.event.inputs.better_net }}" == "true" ]; then
            # Enable BPF stream parser for high-performance network traffic processing, enhancing network monitoring and analysis capabilities
            echo "CONFIG_BPF_STREAM_PARSER=y" >> ./common/arch/arm64/configs/gki_defconfig
            # Enable enhanced Netfilter firewall extension modules, supporting address type-based matching rules, enabling IP set support, improving firewall rule flexibility, and supporting more complex traffic filtering policies
            echo "CONFIG_NETFILTER_XT_MATCH_ADDRTYPE=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_NETFILTER_XT_SET=y" >> ./common/arch/arm64/configs/gki_defconfig
            # Enable IP set framework and its various data structure implementations, providing efficient large-scale IP address management, improving firewall rule processing efficiency, and reducing memory usage
            echo "CONFIG_IP_SET=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_SET_MAX=65534" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_SET_BITMAP_IP=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_SET_BITMAP_IPMAC=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_SET_BITMAP_PORT=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_SET_HASH_IP=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_SET_HASH_IPMARK=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_SET_HASH_IPPORT=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_SET_HASH_IPPORTIP=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_SET_HASH_IPPORTNET=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_SET_HASH_IPMAC=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_SET_HASH_MAC=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_SET_HASH_NETPORTNET=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_SET_HASH_NET=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_SET_HASH_NETNET=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_SET_HASH_NETPORT=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_SET_HASH_NETIFACE=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_SET_LIST_SET=y" >> ./common/arch/arm64/configs/gki_defconfig
            # Enable IPv6 Network Address Translation
            echo "CONFIG_IP6_NF_NAT=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP6_NF_TARGET_MASQUERADE=y" >> ./common/arch/arm64/configs/gki_defconfig
            # Due to vintf compatibility detection rules on some models, enabling CONFIG_IP6_NF_NAT may cause a "Your device has an internal problem. Please contact your device manufacturer for details." prompt upon boot. Therefore, a configuration fix patch is added to hide CONFIG_IP6_NF_NAT=y during kernel compilation without affecting the corresponding functionality.
            cd common
            wget https://github.com/cctv18/oppo_oplus_realme_sm8650/raw/refs/heads/main/other_patch/config.patch
            patch -p1 -F 3 < config.patch || true
          fi

      - name: Add BBR and other congestion control algorithms
        run: |
          if [[ "${{ github.event.inputs.bbr_enable }}" == "true" || "${{ github.event.inputs.bbr_enable }}" == "default" ]]; then
            echo "Adding BBR and other congestion control algorithms..."
            cd kernel_workspace
            # Enable TCP congestion control algorithm controller (required)
            echo "CONFIG_TCP_CONG_ADVANCED=y" >> ./common/arch/arm64/configs/gki_defconfig
            ################################################################################################################################
            # BBR: A congestion control algorithm based on link capacity, which no longer uses signals like packet loss and delay to measure whether congestion has occurred, but directly models the network to cope with and avoid real network congestion;
            # It features high throughput, low latency, and strong packet loss resistance, but when used on mobile phones, it increases CPU and RF module power consumption due to continuous bandwidth/RTT probing, high-frequency calculation, and packet sending, leading to increased power consumption and heat;
            # Moreover, mobile base station buffer depths are usually small (~50ms), and BBR's bandwidth probing phase (ProbeRTT) excessive window reduction may lead to a sharp drop in throughput, and network switching (WiFi → 5G) requires re-probing parameters, which instead increases latency or causes rate oscillation (brief stuttering), and there is RTT unfairness. When competing with loss-based flows, BBR may be too aggressive, grabbing more bandwidth from other software in mixed network environments
            # (e.g., BBR + CUBIC coexistence), reducing fairness for other applications (e.g., background software updates affecting foreground video playback).
            # Therefore, although BBR can significantly reduce queuing delay, has strong packet loss resistance, and high bandwidth utilization, due to its increased power consumption and susceptibility to network rate fluctuations, Android systems do not use
            # BBR congestion algorithm by default, but use the CUBIC algorithm, which achieves the best balance between throughput, stability, compatibility, and energy efficiency. Before enabling BBR, please consider whether you really need to use BBR.
            ################################################################################################################################
            echo "CONFIG_TCP_CONG_BBR=y" >> ./common/arch/arm64/configs/gki_defconfig
            # CUBIC: Android's default TCP congestion control algorithm, which achieves the best balance between throughput, stability, compatibility, and energy efficiency. It features high compatibility and fairness, strong network fluctuation resistance, and low computational overhead, making it the preferred choice for most mobile scenarios.
            echo "CONFIG_TCP_CONG_CUBIC=y" >> ./common/arch/arm64/configs/gki_defconfig
            # VEGAS: One of the delay-based congestion control algorithms, which considers an increase in Round Trip Time (RTT) as congestion. It increases the congestion window when RTT increases and decreases it when RTT decreases.
            echo "CONFIG_TCP_CONG_VEGAS=y" >> ./common/arch/arm64/configs/gki_defconfig
            # New Vegas: An improved version of the Vegas algorithm, optimizing RTT measurement and competition fairness, allowing for more accurate congestion detection and improved coexistence with Reno/CUBIC.
            echo "CONFIG_TCP_CONG_NV=y" >> ./common/arch/arm64/configs/gki_defconfig
            # Westwood+: Dynamically sets congestion window and slow start threshold based on bandwidth estimation (ACK arrival rate); fast recovery, suitable for wireless networks (distinguishes between congestion loss and wireless loss).
            echo "CONFIG_TCP_CONG_WESTWOOD=y" >> ./common/arch/arm64/configs/gki_defconfig
            # HTCP: A loss-based algorithm that uses AIMD to control the congestion window, dynamically adjusting the growth factor based on RTT, combining delay and packet loss signals, optimized for high-latency, high-speed networks.
            echo "CONFIG_TCP_CONG_HTCP=y" >> ./common/arch/arm64/configs/gki_defconfig
            # brutal: A congestion algorithm that maximizes throughput through active probing + aggressive preemption, with no congestion window limit. Minor packet loss (<20%) does not reduce the window, avoiding ProbeRTT phase similar to BBR,
            # continuously maintaining a high sending rate. When coexisting with Reno/CUBIC, Brutal can grab 90%+ bandwidth through high-frequency packet sending, suitable for high-loss weak network environments (such as public Wi-Fi, cellular networks) and
            # live streaming, cloud gaming uplink scenarios where throughput needs to be prioritized over latency sensitivity, improving weak network throughput performance and combating carrier QoS throttling. However, since TCP Brutal only works properly after the application
            # sets bandwidth parameters for each TCP connection, and most Android applications do not support this operation, please do not set TCP Brutal as the default congestion control algorithm.
            echo "CONFIG_TCP_CONG_BRUTAL=y" >> ./common/arch/arm64/configs/gki_defconfig
            if [ "${{ github.event.inputs.bbr_enable }}" == "default" ]; then
              echo "Setting BBR as the default congestion control algorithm..."
              echo "CONFIG_DEFAULT_TCP_CONG=bbr" >> ./common/arch/arm64/configs/gki_defconfig
            else
              echo "CONFIG_DEFAULT_TCP_CONG=cubic" >> ./common/arch/arm64/configs/gki_defconfig
            fi
          fi

      - name: Enable Samsung SSG IO scheduler
        run: |
          if [[ "${{ github.event.inputs.ssg_enable }}" == "true" ]]; then
            echo "Enabling Samsung SSG IO scheduler..."
            cd kernel_workspace
            echo "CONFIG_MQ_IOSCHED_SSG=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_MQ_IOSCHED_SSG_CGROUP=y" >> ./common/arch/arm64/configs/gki_defconfig
          fi

      - name: Add build name
        run: |
          cd kernel_workspace
          echo "Replacing kernel version suffix..."
          if [[ -n "${{ github.event.inputs.kernel_suffix }}" ]]; then
            echo "Current kernel version suffix: ${{ github.event.inputs.kernel_suffix }}"
            for f in ./common/scripts/setlocalversion; do
              sed -i "\$s|echo \"\\\$res\"|echo \"-${{ github.event.inputs.kernel_suffix }}\"|" "$f"
            done
          else
            echo "Current kernel version suffix: ${{ env.KERNEL_NAME }}"
            for f in ./common/scripts/setlocalversion; do
              sed -i "\$s|echo \"\\\$res\"|echo \"-${{ env.KERNEL_NAME }}\"|" "$f"
            done
          fi
          
      - name: Build kernel
        run: |
          WORKDIR="$(pwd)"
          export PATH="/usr/lib/ccache:$PATH"
          export PATH="$WORKDIR/kernel_workspace/clang20/bin:$PATH"
          export PATH="$WORKDIR/kernel_workspace/build-tools/bin:$PATH"
          CLANG_DIR="$WORKDIR/kernel_workspace/clang20/bin"
          CLANG_VERSION="$($CLANG_DIR/clang --version | head -n 1)"
          LLD_VERSION="$($CLANG_DIR/ld.lld --version | head -n 1)"
          echo "Compiler information:"
          echo "Clang version: $CLANG_VERSION"
          echo "LLD version: $LLD_VERSION"
          pahole_version=$(pahole --version 2>/dev/null | head -n1); [ -z "$pahole_version" ] && echo "pahole version: Not installed" || echo "pahole version: $pahole_version"
          
          export CCACHE_COMPILERCHECK="%compiler% -dumpmachine; %compiler% -dumpversion"
          export CCACHE_NOHASHDIR="true"
          export CCACHE_HARDLINK="true"
          export CCACHE_DIR="${{ env.CCACHE_DIR }}"
          export CCACHE_MAXSIZE="3G"
          
          cd kernel_workspace
          if [[ ${{ github.event.inputs.scx_enable }} == "true" ]]; then
            git clone https://github.com/cctv18/sched_ext.git
            rm -rf ./sched_ext/.git
            rm -rf ./sched_ext/README.md
            cp -r ./sched_ext/* ./common/kernel/sched
          fi
          cd common
          # While building the kernel, remove unnecessary .NET, Android NDK, Haskell, CodeQL runtimes to free up space and not block subsequent steps.
          sudo rm -rf /usr/share/dotnet &
          sudo rm -rf /usr/local/lib/android &
          sudo rm -rf /opt/ghc &
          sudo rm -rf /opt/hostedtoolcache/CodeQL &
          make -j$(nproc --all) LLVM=1 ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- CC="ccache clang" LD=ld.lld HOSTLD=ld.lld O=out KCFLAGS+=-O2 KCFLAGS+=-Wno-error gki_defconfig all
          echo "Kernel compilation complete!"
          echo "ccache status:"
          ccache -s
          echo "Space after compilation:"
          df -h
          
      - name: Apply patch_linux and patch kernel
        if: ${{ github.event.inputs.kpm_enable == 'true' }}
        run: |
          cd kernel_workspace/common/out/arch/arm64/boot
          curl -LO https://github.com/ShirkNeko/SukiSU_KernelPatch_patch/releases/download/0.12.0/patch_linux
          chmod +x patch_linux
          ./patch_linux
          rm -f Image
          mv oImage Image
          
      - name: Clone AnyKernel3 and package
        run: |
          cd kernel_workspace
          git clone https://github.com/cctv18/AnyKernel3 --depth=1
          rm -rf ./AnyKernel3/.git
          rm -rf ./AnyKernel3/README.md
          cd AnyKernel3
          cp ../common/out/arch/arm64/boot/Image ./Image
          if [ ! -f ./Image ]; then
            echo "Kernel image file not found, build may have failed"
            exit 1
          fi
          if [[ ${{ github.event.inputs.lz4k_enable }} == "true" ]]; then
            wget https://raw.githubusercontent.com/cctv18/oppo_oplus_realme_sm8650/refs/heads/main/zram.zip
          fi
          if [[ -n "${{ github.event.inputs.kernel_suffix }}" ]]; then
            zip -r ../AnyKernel3_SukiSU_${{ env.KSUVER }}_${{ env.KERNEL_VERSION }}_A14_${{ github.event.inputs.kernel_suffix }}.zip ./*
          else
            zip -r ../AnyKernel3_SukiSU_${{ env.KSUVER }}_${{ env.KERNEL_VERSION }}_A14_${{ env.KERNEL_NAME }}.zip ./*
          fi

      - name: Upload ZIP artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Kernel_ZIP_Artifacts
          path: ${{ github.workspace }}/kernel_workspace/*.zip

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      actions: read
      
    steps:
      - name: Download ZIP artifacts
        uses: actions/download-artifact@v4
        with:
          name: Kernel_ZIP_Artifacts
          path: ./release_zips

      - name: Set environment variables
        run: |
          if [[ -n "${{ github.event.inputs.kernel_suffix }}" ]]; then
            FULL_VERSION=${{ format('{0}.57-{1}', env.KERNEL_VERSION, github.event.inputs.kernel_suffix) }}
            echo "FULL_VERSION=$FULL_VERSION" >> $GITHUB_ENV
            export FULL_VERSION=$FULL_VERSION
          else
            FULL_VERSION=${{ format('{0}.57-{1}', env.KERNEL_VERSION, env.KERNEL_NAME) }}
            echo "FULL_VERSION=$FULL_VERSION" >> $GITHUB_ENV
            export FULL_VERSION=$FULL_VERSION
          fi
          TIME="$(TZ='Asia/Shanghai' date +'%y%m%d%H%M%S')"
          TIME_FORM="$(TZ='Asia/Shanghai' date +'%Y-%m-%d %H:%M:%S')"
          echo "TIME=$TIME" >> $GITHUB_ENV
          echo "TIME_FORM=$TIME_FORM" >> $GITHUB_ENV
          TAG_HEAD="OPPO+OPlus+Realme-A14-build"
          echo "TAG_HEAD=$TAG_HEAD" >> $GITHUB_ENV
          
      - name: Create release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "${{ env.TAG_HEAD }}-${{ env.TIME }}"
          name: "${{ env.TAG_HEAD }}-${{ env.FULL_VERSION }}"
          body: |
            ### 📱 Oppo/OnePlus/Realme Android 14 SukiSU-Ultra SM8650 Universal Kernel | Build Information
            - Kernel Version: ${{ env.FULL_VERSION }}
            - Compilation Time: ${{ env.TIME_FORM }}
            - Device Model: Oppo/OnePlus/Realme Snapdragon 8 Gen 3 6.1 Android 14 Universal Kernel (based on OnePlus 12 Android 14 official OKI source)
            - Features: SukiSU Ultra + SUSFS + VFS + KPM
            - Hook Method: ${{ github.event.inputs.hook_method }}
            - LZ4KD Support: ${{ github.event.inputs.lz4k_enable }}
            - LZ4 Support: ${{ github.event.inputs.lz4_enable }}
            - Network Function Enhancement: ${{ github.event.inputs.better_net }}
            - BBR/Brutal and other congestion control algorithms support: ${{ github.event.inputs.bbr_enable }}
            - Samsung SSG IO Scheduler Support: ${{ github.event.inputs.ssg_enable }}
            - Fengchi Kernel Support: ${{ github.event.inputs.scx_enable }}
            - Recommended System: ColorOS 14 / RealmeUI 5.0
            - SukiSU Manager Download: [SukiSU-Ultra](https://github.com/ShirkNeko/SukiSU-Ultra/releases)
            ### ⏫️ Updates:
            - Updated SukiSU Ultra to the latest version (${{ needs.build.outputs.ksuver }})
            - (Reserved)
            ### 📋 Installation Guide
            1. If your phone already has a third-party Recovery installed (e.g., TWRP), you can download the corresponding AnyKernel flashable package for your device. Enter Recovery mode, flash the package through Recovery, and then restart your device.
            2. If your phone previously had root access, you can install [HorizonKernelFlasher](https://github.com/libxzr/HorizonKernelFlasher/releases) on your phone. Flash the AnyKernel package in HorizonKernelFlasher and restart.
            3. If you have previously flashed the SukiSU Ultra kernel and the SukiSU Ultra Manager has been updated to the latest version, you can directly flash the AnyKernel package within the SukiSU Ultra Manager and restart.
            4. If you have flashed the LZ4KD patch version of the kernel before flashing the non-LZ4KD patch version, to avoid errors, please disable the ZRAM module first.
            #### ※※※ Flashing kernels carries risks. To prevent unexpected bricking of your phone, please be sure to back up critical boot partitions such as 'boot' using software like [KernelFlasher](https://github.com/capntrips/KernelFlasher) before flashing the kernel! ※※※
          draft: false
          prerelease: false
          files: |
            release_zips/AnyKernel3_*.zip
